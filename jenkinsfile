pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-server'   // <-- make sure this tool name matches Jenkins "Global Tool Configuration"
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Git Clone") {
            steps {
                sh '''
                    rm -rf devops-project
                    git clone --branch test-project https://github.com/sudheergundrasi/devops-project.git
                '''
            }
        }

        stage("SonarQube Analysis") {
            steps {
                dir('devops-project') {
                    // Change 'sonar-server' below to whatever name is configured under Manage Jenkins -> Configure System -> SonarQube servers
                    withSonarQubeEnv('sonar-server') {
                        withCredentials([string(credentialsId: 'Sonar-token', variable: 'SONAR_TOKEN')]) {
                            sh """
                                ${SCANNER_HOME}/bin/sonar-scanner \
                                  -Dsonar.projectName=devopsproject \
                                  -Dsonar.projectKey=devopsproject \
                                  -Dsonar.login=$SONAR_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage("Install NPM Dependencies") {
            steps {
                dir('devops-project') {
                    sh "npm install"
                }
            }
        }

        stage("Docker Build") {
            steps {
                dir('devops-project') {
                    sh "docker build -t devopsproject:latest ."
                }
            }
        }

        stage("Tag & Push to DockerHub") {
            steps {
                script {
                    docker.withRegistry('', 'docker') {
                        sh """
                            docker tag devopsproject:latest sudheerkumar/devops:latest
                            docker push sudheerkumar/devops:latest
                        """
                    }
                }
            }
        }

        stage("Docker Scout Image") {
            steps {
                script {
                    docker.withRegistry('', 'docker') {
                        sh """
                            docker scout quickview sudheerkumar/devops:latest
                            docker scout cves sudheerkumar/devops:latest
                            docker scout recommendations sudheerkumar/devops:latest
                        """
                    }
                }
            }
        }

        stage("Deploy to Container") {
            steps {
                sh '''
                    docker rm -f devops || true
                    docker run -d --name zomato -p 3000:3000 sudheerkumar/devops:latest
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed (success or failure).'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
