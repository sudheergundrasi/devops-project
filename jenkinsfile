pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node23'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }
        stage("Git Checkout") {
            steps {
                git branch: 'test-project', url: 'https://github.com/sudheergundrasi/devops-project.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                      -Dsonar.projectName=devopsproject \
                      -Dsonar.projectKey=devopsproject
                    '''
                }
            }
        }
        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit -n', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage("Build Docker Image") {
            steps {
                sh "docker build -t devopsproject:latest ."
            }
        }
        stage("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag devopsproject:latest sudheerkumar/devops:latest"
                        sh "docker push sudheerkumar/devops:latest"
                    }
                }
            }
        }
        stage("Docker Scout Image") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker scout quickview sudheerkumar/devops:latest"
                        sh "docker scout cves sudheerkumar/devops:latest"
                        sh "docker scout recommendations sudheerkumar/devops:latest"
                    }
                }
            }
        }
        stage("Deploy to Container") {
            steps {
                sh '''
                    docker rm -f zomato || true
                    docker run -d --name zomato -p 3000:3000 sudheerkumar/devops:latest
                '''
            }
        }
    }
}
