pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-server'   
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }

        stage("Git Clone") {
            steps {
                sh '''
                    rm -rf devops-project
                    git clone --branch test-project https://github.com/sudheergundrasi/devops-project.git
                '''
            }
        }

        stage("SonarQube Analysis") {
            steps {
                dir('devops-project') {
                    withSonarQubeEnv('sonar-server') {
                        withCredentials([string(credentialsId: 'Sonar-Token', variable: 'SONAR_TOKEN')]) {
                            sh """
                                ${SCANNER_HOME}/bin/sonar-scanner \
                                  -Dsonar.projectName=devopsproject \
                                  -Dsonar.projectKey=devopsproject \
                                  -Dsonar.login=$SONAR_TOKEN
                            """
                        }
                    }
                }
            }
        }

        stage("Install NPM Dependencies") {
            steps {
                dir('devops-project') {
                    sh "npm install"
                }
            }
        }

        stage("Docker Build") {
            steps {
                dir('devops-project') {
                    sh "docker build -t docker ."
                }
            }
        }

        stage("Docker Push") {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker tag docker gundrasisudheer/docker:latest
                        docker push gundrasisudheer/docker:latest
                    '''
                }
            }
        }

        stage("Docker Run") {
            steps {
                sh '''
                    docker rm -f docker || true
                    docker run -d --name docker --restart always -p 3000:3000 gundrasisudheer/docker:latest
                '''
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed (success or failure).'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
